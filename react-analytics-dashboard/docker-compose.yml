version: '3.8'

services:
  # Main application
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: runner
    container_name: analytics-dashboard
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=http://localhost:8000
      - NEXT_PUBLIC_WS_URL=ws://localhost:3001
    volumes:
      - ./.env.local:/app/.env.local:ro
    depends_on:
      - redis
      - postgres
    restart: unless-stopped
    networks:
      - dashboard-network

  # Development server with hot reload
  dev:
    build:
      context: .
      dockerfile: Dockerfile.dev
    container_name: analytics-dashboard-dev
    ports:
      - "3000:3000"
      - "6006:6006" # Storybook
    environment:
      - NODE_ENV=development
      - NEXT_PUBLIC_API_URL=http://localhost:8000
      - NEXT_PUBLIC_WS_URL=ws://localhost:3001
    volumes:
      - .:/app
      - /app/node_modules
      - /app/.next
    depends_on:
      - redis
      - postgres
    networks:
      - dashboard-network

  # Mock API server
  api:
    image: node:18-alpine
    container_name: analytics-api
    ports:
      - "8000:8000"
    working_dir: /app
    volumes:
      - ./mock-api:/app
    command: ["npm", "start"]
    environment:
      - NODE_ENV=development
      - PORT=8000
      - REDIS_URL=redis://redis:6379
      - DATABASE_URL=postgresql://dashboard:password@postgres:5432/analytics
    depends_on:
      - redis
      - postgres
    networks:
      - dashboard-network

  # WebSocket server
  websocket:
    image: node:18-alpine
    container_name: analytics-websocket
    ports:
      - "3001:3001"
    working_dir: /app
    volumes:
      - ./websocket-server:/app
    command: ["npm", "start"]
    environment:
      - NODE_ENV=development
      - PORT=3001
      - REDIS_URL=redis://redis:6379
    depends_on:
      - redis
    networks:
      - dashboard-network

  # Redis for caching and sessions
  redis:
    image: redis:7-alpine
    container_name: analytics-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    restart: unless-stopped
    networks:
      - dashboard-network

  # PostgreSQL database
  postgres:
    image: postgres:15-alpine
    container_name: analytics-postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=analytics
      - POSTGRES_USER=dashboard
      - POSTGRES_PASSWORD=password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./sql/init.sql:/docker-entrypoint-initdb.d/init.sql
    restart: unless-stopped
    networks:
      - dashboard-network

  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    container_name: analytics-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - app
      - api
      - websocket
    restart: unless-stopped
    networks:
      - dashboard-network

  # Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: analytics-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - dashboard-network

  # Grafana for metrics visualization
  grafana:
    image: grafana/grafana:latest
    container_name: analytics-grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - dashboard-network

volumes:
  redis_data:
    driver: local
  postgres_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  dashboard-network:
    driver: bridge
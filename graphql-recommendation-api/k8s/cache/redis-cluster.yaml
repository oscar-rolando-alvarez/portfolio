apiVersion: v1
kind: ConfigMap
metadata:
  name: redis-config
  namespace: recommendation-system
  labels:
    app: redis-cluster
data:
  redis.conf: |
    cluster-enabled yes
    cluster-require-full-coverage no
    cluster-node-timeout 15000
    cluster-config-file /data/nodes.conf
    cluster-migration-barrier 1
    appendonly yes
    protected-mode no
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: redis-cluster
  namespace: recommendation-system
  labels:
    app: redis-cluster
spec:
  serviceName: redis-cluster
  replicas: 6
  selector:
    matchLabels:
      app: redis-cluster
  template:
    metadata:
      labels:
        app: redis-cluster
    spec:
      containers:
      - name: redis
        image: redis:7-alpine
        ports:
        - containerPort: 6379
          name: client
        - containerPort: 16379
          name: gossip
        command:
        - redis-server
        args:
        - /conf/redis.conf
        - --cluster-announce-ip
        - $(POD_IP)
        env:
        - name: POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        volumeMounts:
        - name: conf
          mountPath: /conf
          readOnly: false
        - name: data
          mountPath: /data
          readOnly: false
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "200m"
      volumes:
      - name: conf
        configMap:
          name: redis-config
          items:
          - key: redis.conf
            path: redis.conf
  volumeClaimTemplates:
  - metadata:
      name: data
    spec:
      accessModes: ["ReadWriteOnce"]
      storageClassName: fast-ssd
      resources:
        requests:
          storage: 5Gi
---
apiVersion: v1
kind: Service
metadata:
  name: redis-cluster
  namespace: recommendation-system
  labels:
    app: redis-cluster
spec:
  type: ClusterIP
  clusterIP: None
  ports:
  - port: 6379
    targetPort: 6379
    protocol: TCP
    name: client
  - port: 16379
    targetPort: 16379
    protocol: TCP
    name: gossip
  selector:
    app: redis-cluster
---
# Redis cluster initialization job
apiVersion: batch/v1
kind: Job
metadata:
  name: redis-cluster-init
  namespace: recommendation-system
  labels:
    app: redis-cluster-init
spec:
  template:
    spec:
      restartPolicy: OnFailure
      containers:
      - name: redis-cluster-init
        image: redis:7-alpine
        command:
        - /bin/sh
        - -c
        - |
          set -e
          echo "Waiting for Redis nodes to be ready..."
          for i in {0..5}; do
            until redis-cli -h redis-cluster-${i}.redis-cluster.recommendation-system.svc.cluster.local ping; do
              echo "Waiting for redis-cluster-${i}..."
              sleep 2
            done
          done
          
          echo "Creating Redis cluster..."
          redis-cli --cluster create \
            redis-cluster-0.redis-cluster.recommendation-system.svc.cluster.local:6379 \
            redis-cluster-1.redis-cluster.recommendation-system.svc.cluster.local:6379 \
            redis-cluster-2.redis-cluster.recommendation-system.svc.cluster.local:6379 \
            redis-cluster-3.redis-cluster.recommendation-system.svc.cluster.local:6379 \
            redis-cluster-4.redis-cluster.recommendation-system.svc.cluster.local:6379 \
            redis-cluster-5.redis-cluster.recommendation-system.svc.cluster.local:6379 \
            --cluster-replicas 1 --cluster-yes
          
          echo "Redis cluster created successfully!"
version: '3.8'

services:
  # Angular LMS Frontend
  angular-lms:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: angular-lms-frontend
    ports:
      - "4200:80"
    environment:
      - NODE_ENV=production
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./default.conf:/etc/nginx/conf.d/default.conf:ro
    depends_on:
      - api-server
      - redis
      - postgres
    networks:
      - lms-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # API Server (Node.js/Express)
  api-server:
    image: node:18-alpine
    container_name: angular-lms-api
    working_dir: /app
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://lms_user:lms_password@postgres:5432/lms_database
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=your-jwt-secret-key
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - SENDGRID_API_KEY=${SENDGRID_API_KEY}
      - STRIPE_SECRET_KEY=${STRIPE_SECRET_KEY}
      - FIREBASE_ADMIN_SDK=${FIREBASE_ADMIN_SDK}
    volumes:
      - ./api:/app
      - api_node_modules:/app/node_modules
      - ./uploads:/app/uploads
    command: >
      sh -c "npm install && 
             npm run build && 
             npm run start:prod"
    depends_on:
      - postgres
      - redis
    networks:
      - lms-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: angular-lms-postgres
    environment:
      - POSTGRES_DB=lms_database
      - POSTGRES_USER=lms_user
      - POSTGRES_PASSWORD=lms_password
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    networks:
      - lms-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U lms_user -d lms_database"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  # Redis for Caching and Session Storage
  redis:
    image: redis:7-alpine
    container_name: angular-lms-redis
    command: redis-server --appendonly yes --requirepass redis_password
    environment:
      - REDIS_PASSWORD=redis_password
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - lms-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Elasticsearch for Search
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.8.0
    container_name: angular-lms-elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
      - "9300:9300"
    networks:
      - lms-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # MinIO for Object Storage (Alternative to AWS S3)
  minio:
    image: minio/minio:latest
    container_name: angular-lms-minio
    command: server /data --console-address ":9001"
    environment:
      - MINIO_ROOT_USER=minioadmin
      - MINIO_ROOT_PASSWORD=minioadmin123
    volumes:
      - minio_data:/data
    ports:
      - "9000:9000"
      - "9001:9001"
    networks:
      - lms-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # RabbitMQ for Message Queue
  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: angular-lms-rabbitmq
    environment:
      - RABBITMQ_DEFAULT_USER=lms_user
      - RABBITMQ_DEFAULT_PASS=lms_password
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    networks:
      - lms-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "-q", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Nginx Reverse Proxy
  nginx-proxy:
    image: nginx:alpine
    container_name: angular-lms-proxy
    volumes:
      - ./nginx-proxy.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - angular-lms
      - api-server
    networks:
      - lms-network
    restart: unless-stopped

  # Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: angular-lms-prometheus
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    ports:
      - "9090:9090"
    networks:
      - lms-network
    restart: unless-stopped

  # Grafana for Monitoring Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: angular-lms-grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    ports:
      - "3001:3000"
    depends_on:
      - prometheus
    networks:
      - lms-network
    restart: unless-stopped

  # Video Processing Service
  video-processor:
    image: jrottenberg/ffmpeg:latest
    container_name: angular-lms-video-processor
    volumes:
      - ./uploads:/app/uploads
      - ./processed:/app/processed
    command: tail -f /dev/null  # Keep container running
    networks:
      - lms-network
    restart: unless-stopped

  # Backup Service
  backup:
    image: postgres:15-alpine
    container_name: angular-lms-backup
    environment:
      - PGPASSWORD=lms_password
    volumes:
      - ./backups:/backups
      - postgres_data:/var/lib/postgresql/data:ro
    command: >
      sh -c "while true; do
        pg_dump -h postgres -U lms_user -d lms_database > /backups/backup_$$(date +%Y%m%d_%H%M%S).sql
        find /backups -name '*.sql' -mtime +7 -delete
        sleep 86400
      done"
    depends_on:
      - postgres
    networks:
      - lms-network
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  elasticsearch_data:
    driver: local
  minio_data:
    driver: local
  rabbitmq_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  api_node_modules:
    driver: local

networks:
  lms-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
version: '3.8'

services:
  # Main blockchain node
  blockchain-node:
    build: .
    ports:
      - "8080:8080"    # API port
      - "8333:8333"    # P2P port
    volumes:
      - blockchain_data:/data
      - ./logs:/logs
    environment:
      - RUST_LOG=info
      - BLOCKCHAIN_NETWORK=testnet
    command: >
      blockchain-node
      --data-dir /data
      --api-host 0.0.0.0
      --api-port 8080
      --p2p-port 8333
      --network testnet
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Dedicated miner
  blockchain-miner:
    build: .
    depends_on:
      - blockchain-node
    volumes:
      - miner_data:/data
      - ./logs:/logs
    environment:
      - RUST_LOG=info
    command: >
      blockchain-miner
      --data-dir /data
      --address miner_test_address_1234567890
      --threads 2
      --stats-interval 60
    restart: unless-stopped
    profiles:
      - mining

  # Additional peer node
  blockchain-peer1:
    build: .
    ports:
      - "8081:8080"    # API port
      - "8334:8333"    # P2P port
    volumes:
      - peer1_data:/data
      - ./logs:/logs
    environment:
      - RUST_LOG=info
      - BLOCKCHAIN_NETWORK=testnet
    command: >
      blockchain-node
      --data-dir /data
      --api-host 0.0.0.0
      --api-port 8080
      --p2p-port 8333
      --network testnet
      --bootstrap /ip4/blockchain-node/tcp/8333
    restart: unless-stopped
    depends_on:
      - blockchain-node
    profiles:
      - multi-node

  # Another peer node
  blockchain-peer2:
    build: .
    ports:
      - "8082:8080"    # API port
      - "8335:8333"    # P2P port
    volumes:
      - peer2_data:/data
      - ./logs:/logs
    environment:
      - RUST_LOG=info
      - BLOCKCHAIN_NETWORK=testnet
    command: >
      blockchain-node
      --data-dir /data
      --api-host 0.0.0.0
      --api-port 8080
      --p2p-port 8333
      --network testnet
      --bootstrap /ip4/blockchain-node/tcp/8333
    restart: unless-stopped
    depends_on:
      - blockchain-node
    profiles:
      - multi-node

  # Nginx reverse proxy for load balancing API requests
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/ssl:ro
    depends_on:
      - blockchain-node
    restart: unless-stopped
    profiles:
      - production

  # Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
    restart: unless-stopped
    profiles:
      - monitoring

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./grafana/datasources:/etc/grafana/provisioning/datasources
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    depends_on:
      - prometheus
    restart: unless-stopped
    profiles:
      - monitoring

volumes:
  blockchain_data:
    driver: local
  miner_data:
    driver: local
  peer1_data:
    driver: local
  peer2_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  default:
    driver: bridge
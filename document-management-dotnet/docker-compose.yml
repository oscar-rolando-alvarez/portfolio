version: '3.8'

services:
  # SQL Server Database
  sqlserver:
    image: mcr.microsoft.com/mssql/server:2022-latest
    container_name: document-management-sql
    environment:
      ACCEPT_EULA: "Y"
      SA_PASSWORD: "DocumentManagement123!"
      MSSQL_PID: "Express"
    ports:
      - "1433:1433"
    volumes:
      - sqlserver_data:/var/opt/mssql
    healthcheck:
      test: ["CMD-SHELL", "/opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P DocumentManagement123! -Q 'SELECT 1'"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - document-management

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: document-management-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - document-management

  # Elasticsearch
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: document-management-elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - http.cors.enabled=true
      - http.cors.allow-origin="*"
    ports:
      - "9200:9200"
      - "9300:9300"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - document-management

  # Kibana (Optional - for Elasticsearch management)
  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    container_name: document-management-kibana
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
      - xpack.security.enabled=false
    ports:
      - "5601:5601"
    depends_on:
      elasticsearch:
        condition: service_healthy
    networks:
      - document-management

  # Document Management API
  api:
    build:
      context: .
      dockerfile: src/DocumentManagement.API/Dockerfile
    container_name: document-management-api
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - ASPNETCORE_URLS=http://+:80
      - ConnectionStrings__DefaultConnection=Server=sqlserver;Database=DocumentManagement;User Id=sa;Password=DocumentManagement123!;TrustServerCertificate=true;
      - ConnectionStrings__Redis=redis:6379
      - ConnectionStrings__Elasticsearch=http://elasticsearch:9200
      - Storage__ProviderType=FileSystem
      - Storage__ContainerName=/app/storage
      - JWT__SecretKey=ThisIsAVeryLongSecretKeyForJWTTokenGenerationThatMeetsMinimumRequirements
      - JWT__Issuer=DocumentManagement
      - JWT__Audience=DocumentManagement
      - JWT__ExpiryMinutes=60
    ports:
      - "8080:80"
    volumes:
      - ./storage:/app/storage
      - ./logs:/app/logs
    depends_on:
      sqlserver:
        condition: service_healthy
      redis:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
    networks:
      - document-management
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Nginx Reverse Proxy (Optional)
  nginx:
    image: nginx:alpine
    container_name: document-management-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - api
    networks:
      - document-management

volumes:
  sqlserver_data:
    driver: local
  redis_data:
    driver: local
  elasticsearch_data:
    driver: local

networks:
  document-management:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
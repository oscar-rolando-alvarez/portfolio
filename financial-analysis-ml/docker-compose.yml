version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: financial_postgres
    environment:
      POSTGRES_DB: financial_analysis
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    networks:
      - financial_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: financial_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - financial_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    command: redis-server --appendonly yes

  # FastAPI Application
  api:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: financial_api
    environment:
      # Database
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_DB: financial_analysis
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      DATABASE_URL: postgresql+asyncpg://postgres:postgres@postgres:5432/financial_analysis
      
      # Redis
      REDIS_URL: redis://redis:6379/0
      
      # Celery
      CELERY_BROKER_URL: redis://redis:6379/1
      CELERY_RESULT_BACKEND: redis://redis:6379/1
      
      # JWT
      JWT_SECRET_KEY: your-super-secret-jwt-key-change-in-production
      
      # CORS
      ALLOWED_ORIGINS: http://localhost:3000,http://localhost:8080
      ALLOWED_HOSTS: localhost,127.0.0.1,0.0.0.0
      
      # Application
      DEBUG: "false"
      LOG_LEVEL: INFO
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - financial_network
    volumes:
      - ./logs:/app/logs
    restart: unless-stopped

  # Celery Worker
  celery_worker:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: financial_celery_worker
    environment:
      # Database
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_DB: financial_analysis
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      DATABASE_URL: postgresql+asyncpg://postgres:postgres@postgres:5432/financial_analysis
      
      # Redis
      REDIS_URL: redis://redis:6379/0
      
      # Celery
      CELERY_BROKER_URL: redis://redis:6379/1
      CELERY_RESULT_BACKEND: redis://redis:6379/1
      
      # Application
      DEBUG: "false"
      LOG_LEVEL: INFO
    command: celery -A src.infrastructure.messaging.celery_app worker --loglevel=info --concurrency=4
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - financial_network
    volumes:
      - ./logs:/app/logs
    restart: unless-stopped

  # Celery Beat (Scheduler)
  celery_beat:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: financial_celery_beat
    environment:
      # Database
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_DB: financial_analysis
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      DATABASE_URL: postgresql+asyncpg://postgres:postgres@postgres:5432/financial_analysis
      
      # Redis
      REDIS_URL: redis://redis:6379/0
      
      # Celery
      CELERY_BROKER_URL: redis://redis:6379/1
      CELERY_RESULT_BACKEND: redis://redis:6379/1
      
      # Application
      DEBUG: "false"
      LOG_LEVEL: INFO
    command: celery -A src.infrastructure.messaging.celery_app beat --loglevel=info
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - financial_network
    volumes:
      - ./logs:/app/logs
    restart: unless-stopped

  # Celery Flower (Monitoring)
  celery_flower:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: financial_celery_flower
    environment:
      CELERY_BROKER_URL: redis://redis:6379/1
      CELERY_RESULT_BACKEND: redis://redis:6379/1
    command: celery -A src.infrastructure.messaging.celery_app flower --port=5555
    ports:
      - "5555:5555"
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - financial_network
    restart: unless-stopped

  # Nginx (Optional - for production)
  nginx:
    image: nginx:alpine
    container_name: financial_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - api
    networks:
      - financial_network
    restart: unless-stopped
    profiles:
      - production

volumes:
  postgres_data:
  redis_data:

networks:
  financial_network:
    driver: bridge
"""Initial migration

Revision ID: 001
Revises: 
Create Date: 2024-01-01 00:00:00.000000

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '001'
down_revision = None
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    
    # Create users table
    op.create_table('users',
        sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column('email', sa.String(length=255), nullable=False),
        sa.Column('password_hash', sa.String(length=255), nullable=False),
        sa.Column('first_name', sa.String(length=100), nullable=False),
        sa.Column('last_name', sa.String(length=100), nullable=False),
        sa.Column('is_active', sa.Boolean(), nullable=False),
        sa.Column('is_verified', sa.Boolean(), nullable=False),
        sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
        sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
        sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=True)
    
    # Create financial_instruments table
    op.create_table('financial_instruments',
        sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column('symbol', sa.String(length=20), nullable=False),
        sa.Column('name', sa.String(length=255), nullable=False),
        sa.Column('instrument_type', sa.Enum('STOCK', 'BOND', 'COMMODITY', 'CURRENCY', 'CRYPTO', 'INDEX', 'ETF', 'OPTION', 'FUTURE', name='instrumenttype'), nullable=False),
        sa.Column('currency', sa.Enum('USD', 'EUR', 'GBP', 'JPY', 'CAD', 'AUD', 'CHF', name='currency'), nullable=False),
        sa.Column('exchange', sa.String(length=20), nullable=False),
        sa.Column('sector', sa.String(length=100), nullable=True),
        sa.Column('industry', sa.String(length=100), nullable=True),
        sa.Column('description', sa.Text(), nullable=True),
        sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column('is_active', sa.Boolean(), nullable=False),
        sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
        sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
        sa.PrimaryKeyConstraint('id'),
        sa.UniqueConstraint('symbol', 'exchange', name='uq_symbol_exchange')
    )
    op.create_index(op.f('ix_financial_instruments_exchange'), 'financial_instruments', ['exchange'], unique=False)
    op.create_index(op.f('ix_financial_instruments_instrument_type'), 'financial_instruments', ['instrument_type'], unique=False)
    op.create_index(op.f('ix_financial_instruments_symbol'), 'financial_instruments', ['symbol'], unique=False)
    op.create_index('ix_instrument_type_sector', 'financial_instruments', ['instrument_type', 'sector'], unique=False)
    
    # Create price_data table
    op.create_table('price_data',
        sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column('instrument_id', postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column('timestamp', sa.DateTime(timezone=True), nullable=False),
        sa.Column('open_price', sa.DECIMAL(precision=15, scale=6), nullable=False),
        sa.Column('high_price', sa.DECIMAL(precision=15, scale=6), nullable=False),
        sa.Column('low_price', sa.DECIMAL(precision=15, scale=6), nullable=False),
        sa.Column('close_price', sa.DECIMAL(precision=15, scale=6), nullable=False),
        sa.Column('volume', sa.Integer(), nullable=False),
        sa.Column('adjusted_close', sa.DECIMAL(precision=15, scale=6), nullable=True),
        sa.Column('dividend_amount', sa.DECIMAL(precision=15, scale=6), nullable=True),
        sa.Column('split_coefficient', sa.DECIMAL(precision=15, scale=6), nullable=True),
        sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
        sa.ForeignKeyConstraint(['instrument_id'], ['financial_instruments.id'], ),
        sa.PrimaryKeyConstraint('id'),
        sa.UniqueConstraint('instrument_id', 'timestamp', name='uq_instrument_timestamp')
    )
    op.create_index('ix_instrument_timestamp', 'price_data', ['instrument_id', 'timestamp'], unique=False)
    op.create_index(op.f('ix_price_data_timestamp'), 'price_data', ['timestamp'], unique=False)
    
    # Create portfolios table
    op.create_table('portfolios',
        sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column('user_id', postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column('name', sa.String(length=255), nullable=False),
        sa.Column('description', sa.Text(), nullable=True),
        sa.Column('base_currency', sa.Enum('USD', 'EUR', 'GBP', 'JPY', 'CAD', 'AUD', 'CHF', name='currency'), nullable=False),
        sa.Column('is_active', sa.Boolean(), nullable=False),
        sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
        sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
        sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
        sa.PrimaryKeyConstraint('id'),
        sa.UniqueConstraint('user_id', 'name', name='uq_user_portfolio_name')
    )
    op.create_index('ix_user_portfolios', 'portfolios', ['user_id', 'is_active'], unique=False)
    
    # Create portfolio_positions table
    op.create_table('portfolio_positions',
        sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column('portfolio_id', postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column('instrument_id', postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column('quantity', sa.DECIMAL(precision=15, scale=6), nullable=False),
        sa.Column('average_cost', sa.DECIMAL(precision=15, scale=6), nullable=False),
        sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
        sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
        sa.ForeignKeyConstraint(['instrument_id'], ['financial_instruments.id'], ),
        sa.ForeignKeyConstraint(['portfolio_id'], ['portfolios.id'], ),
        sa.PrimaryKeyConstraint('id'),
        sa.UniqueConstraint('portfolio_id', 'instrument_id', name='uq_portfolio_instrument')
    )
    op.create_index('ix_portfolio_positions', 'portfolio_positions', ['portfolio_id'], unique=False)
    
    # Create predictions table
    op.create_table('predictions',
        sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column('user_id', postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column('instrument_id', postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column('prediction_type', sa.Enum('PRICE_FORECAST', 'TREND_ANALYSIS', 'VOLATILITY_FORECAST', 'RISK_ASSESSMENT', 'ANOMALY_DETECTION', name='predictiontype'), nullable=False),
        sa.Column('model_type', sa.Enum('LINEAR_REGRESSION', 'RANDOM_FOREST', 'LSTM', 'TRANSFORMER', 'ARIMA', 'PROPHET', name='modeltype'), nullable=False),
        sa.Column('status', sa.Enum('PENDING', 'PROCESSING', 'COMPLETED', 'FAILED', name='predictionstatus'), nullable=False),
        sa.Column('parameters', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
        sa.Column('results', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column('model_accuracy', sa.DECIMAL(precision=5, scale=4), nullable=True),
        sa.Column('model_version', sa.String(length=50), nullable=True),
        sa.Column('training_data_start', sa.DateTime(timezone=True), nullable=True),
        sa.Column('training_data_end', sa.DateTime(timezone=True), nullable=True),
        sa.Column('prediction_horizon_days', sa.Integer(), nullable=True),
        sa.Column('error_message', sa.Text(), nullable=True),
        sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
        sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
        sa.Column('completed_at', sa.DateTime(timezone=True), nullable=True),
        sa.ForeignKeyConstraint(['instrument_id'], ['financial_instruments.id'], ),
        sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
        sa.PrimaryKeyConstraint('id')
    )
    op.create_index('ix_instrument_predictions', 'predictions', ['instrument_id', 'prediction_type'], unique=False)
    op.create_index('ix_pending_predictions', 'predictions', ['status', 'created_at'], unique=False)
    op.create_index(op.f('ix_predictions_model_type'), 'predictions', ['model_type'], unique=False)
    op.create_index(op.f('ix_predictions_prediction_type'), 'predictions', ['prediction_type'], unique=False)
    op.create_index(op.f('ix_predictions_status'), 'predictions', ['status'], unique=False)
    op.create_index('ix_user_predictions', 'predictions', ['user_id', 'status'], unique=False)
    
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index('ix_user_predictions', table_name='predictions')
    op.drop_index(op.f('ix_predictions_status'), table_name='predictions')
    op.drop_index(op.f('ix_predictions_prediction_type'), table_name='predictions')
    op.drop_index(op.f('ix_predictions_model_type'), table_name='predictions')
    op.drop_index('ix_pending_predictions', table_name='predictions')
    op.drop_index('ix_instrument_predictions', table_name='predictions')
    op.drop_table('predictions')
    op.drop_index('ix_portfolio_positions', table_name='portfolio_positions')
    op.drop_table('portfolio_positions')
    op.drop_index('ix_user_portfolios', table_name='portfolios')
    op.drop_table('portfolios')
    op.drop_index(op.f('ix_price_data_timestamp'), table_name='price_data')
    op.drop_index('ix_instrument_timestamp', table_name='price_data')
    op.drop_table('price_data')
    op.drop_index('ix_instrument_type_sector', table_name='financial_instruments')
    op.drop_index(op.f('ix_financial_instruments_symbol'), table_name='financial_instruments')
    op.drop_index(op.f('ix_financial_instruments_instrument_type'), table_name='financial_instruments')
    op.drop_index(op.f('ix_financial_instruments_exchange'), table_name='financial_instruments')
    op.drop_table('financial_instruments')
    op.drop_index(op.f('ix_users_email'), table_name='users')
    op.drop_table('users')
    # ### end Alembic commands ###
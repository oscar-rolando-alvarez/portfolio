version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: messaging-postgres
    environment:
      POSTGRES_DB: messaging_db
      POSTGRES_USER: messaging_user
      POSTGRES_PASSWORD: messaging_pass
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - messaging-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U messaging_user -d messaging_db"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: messaging-redis
    command: redis-server --appendonly yes --requirepass redis_pass
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - messaging-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Zookeeper for Kafka
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: messaging-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - messaging-network
    healthcheck:
      test: ["CMD-SHELL", "echo ruok | nc localhost 2181"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Kafka Message Broker
  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: messaging-kafka
    depends_on:
      zookeeper:
        condition: service_healthy
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: true
    ports:
      - "9092:9092"
    networks:
      - messaging-network
    healthcheck:
      test: ["CMD-SHELL", "kafka-broker-api-versions --bootstrap-server localhost:9092"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Messaging Application
  messaging-app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: messaging-app
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    environment:
      SPRING_PROFILES_ACTIVE: docker
      DATABASE_URL: jdbc:postgresql://postgres:5432/messaging_db
      DATABASE_USERNAME: messaging_user
      DATABASE_PASSWORD: messaging_pass
      REDIS_HOST: redis
      REDIS_PASSWORD: redis_pass
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      JWT_SECRET: myVerySecretJWTKeyForDockerEnvironment
      ENCRYPTION_ENABLED: true
      ENCRYPTION_KEY: myVerySecretEncryptionKeyForDocker123
    ports:
      - "8080:8080"
    networks:
      - messaging-network
    volumes:
      - app_uploads:/tmp/messaging-uploads
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/actuator/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: messaging-nginx
    depends_on:
      messaging-app:
        condition: service_healthy
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./docker/nginx/ssl:/etc/nginx/ssl
    ports:
      - "80:80"
      - "443:443"
    networks:
      - messaging-network

  # Prometheus for Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: messaging-prometheus
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - messaging-network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'

  # Grafana for Dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: messaging-grafana
    depends_on:
      - prometheus
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./docker/grafana/datasources:/etc/grafana/provisioning/datasources
    ports:
      - "3000:3000"
    networks:
      - messaging-network

volumes:
  postgres_data:
  redis_data:
  app_uploads:
  prometheus_data:
  grafana_data:

networks:
  messaging-network:
    driver: bridge